====================================================================================================
Configuration
- add web servers internals section to config.json
    - "threadPool": 4,
      "procThreads": 4,
      "commThreads": 2,

- let web-install.sh insert config.json into exploded WAR resources file

====================================================================================================
Commands
x create single UserCommand class
    x has field for command type
    x has field for set of args passed in by workload generator

x replace CommandTypes with CommandCodes class to simply store API_CODE values

x update jersey resource commands to reflect single user command

x fix typo in CommandCodes

====================================================================================================
Jersey Resources
x AddResource does not include userId when creating UserCommand instance
x create resource classes for remaining commands
- change resources to accept workload file sequence numbers and user sequence numbers as query parameters
    - when developing the web client, ignore user sequence numbers and send 0's (transaction server doesn't care what order the requests came in if they're from a real person)

- update jersey resources to be asynchronous

====================================================================================================
TransactionService
x update service to take generic UserCommand class as arguement when sending commands
- change service to send a formatted message over a socket
    x format the message properly
    x use config.json to configure target host of transaction server
    - use currently active web server host/port when sending commands
        - look at incoming requests to see current hostname
        - read from resource file that run-webserver.sh edits for hostname value
    - receive and interpret response from tx server

====================================================================================================
Logging
- use thread pool size for LogProcessingThread retrieved from config.json web server internals

====================================================================================================
Template System
- develop hierarchy of templates
    - write base template
    - write template for each command that corresponds to a form

- integrate twitter bootstrap

====================================================================================================
TemplateService
- handle errors from transaction server properly
    - issue: how to determine if response is erroneous?
        - solution: map http methods to their acceptable status codes. check to see if transaction response code is in this map

    - issue: how to dynamically display error templates based on command and response?
        - solution: write custom error template for each command. delegate error handling to the jersey resource through "@ErrorTemplate" tag